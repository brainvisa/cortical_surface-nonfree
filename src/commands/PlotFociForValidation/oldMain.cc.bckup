/*
 *  Copyright (C) 1997-2005 CEA
 *
 *  This software and supporting documentation were developed by
 *
 *      Laboratoire LSIS, �quipe LXAO,
 *      Marseille, France
 *
 *   CEA/DSV/SHFJ
 *   4 place du General Leclerc
 *   91401 Orsay cedex
 *   France
 */

#include <aims/mesh/geometric.h>
#include <aims/data/data_g.h>
#include <aims/io/io_g.h>
#include <aims/math/math_g.h>
#include <aims/vector/vector.h>
#include <aims/mesh/texture.h>
#include <aims/mesh/surface.h>
#include <aims/mesh/surfaceOperation.h>
#include <aims/mesh/curv.h>
#include <aims/distancemap/meshdistance_d.h>
#include <aims/distancemap/meshmorphomat_d.h>
#include <aims/connectivity/meshcc_d.h>
#include <aims/morphology/morphology_g.h>
#include <cortical_surface/surfacereferential/shortestPath.h>
#include <cortical_surface/mesh/linkPath.h>
#include <cortical_surface/mesh/pointDistance.h>
#include <aims/io/reader.h>
#include <aims/io/writer.h>
#include <aims/getopt/getopt2.h>
#include <aims/connectivity/meshcc.h>
#include <iostream>
#include <iomanip>

using namespace aims;
using namespace carto;
using namespace std;

int main( int argc, const char** argv )
{
  try
    {
     string  meshfile, fociFile, fileLat, fileLon;

     AimsApplication    app( argc, argv, "stats i the 2D space for activation foci dispersion across subjects" );
     app.addOption( meshfile, "-i", "input mesh" );
     app.alias( "--input", "-i" );
     app.addOption(fociFile, "-f", "foci file" );
     app.alias( "--foci", "-f");
     app.addOption( fileLat, "-x", "latitude texture" );
     app.alias( "--xcoord", "-x" );
     app.addOption( fileLon, "-y", "longitude texture" );
     app.alias( "--ycoord", "-y" );
     app.initialize();

      //
      // read triangulation

     AimsSurfaceTriangle surfaceIn;
     Reader<AimsSurfaceTriangle> triR( meshfile );
     triR >> surfaceIn;

     TimeTexture< float > lat, lon;
     Reader< TimeTexture<float> > latW(fileLat);
     latW >> lat;
     Reader< TimeTexture<float> > lonW(fileLon);
     lonW >> lon;

     std::vector< uint > listeIndex;
     std::vector<Point3df> vert=surfaceIn.vertex();
     Point3df bary;
     bary[0]=0.0; bary[1]=0.0; bary[2]=0.0;
     uint nVert=vert.size();
     TimeTexture< short > texOut(1, nVert);
     for (uint i=0; i<nVert; i++)
	texOut[0].item(i)=0;

     FILE *foci=fopen(fociFile.c_str(), "r");

     uint a;
     fscanf(foci, "%u\n", &a);
     listeIndex.push_back(a);
     while (!feof(foci))
     {
          fscanf(foci, "%u\n", &a);
          listeIndex.push_back(a);
     }
     uint n_points=listeIndex.size();

     float x=0.0, y=0.0;
     for ( uint i=0; i<n_points; i++)
     {
          a=listeIndex[i];
          texOut[0].item(a)=100;
          x+=lat[0].item(a);
/*          if (lon[0].item(a) > 300)*/
/*               y+=lon[0].item(a)-360.0;*/
          /*else*/ y+=lon[0].item(a);
/*          cout << "(" << lat[0].item(a) << ", " << lon[0].item(a) << ")" << endl;*/
     }
     x/=(float) n_points;
     y/=(float) n_points; /*if (y<0.0) (y=y+360.0);*/
//      std::cout << "Centre de gravité : (" << x << ", " << y << ")" <<std::endl;

     float xv, yv;
     float dista, distMin=10000.0;
     uint a_index;
     for ( uint i=0; i<nVert; i++)
     {
          xv=lat[0].item(i);
          yv=lon[0].item(i); 
          dista=sqrt( (x-xv)*(x-xv) + (y-yv)*(y-yv) );
          if (dista<distMin)
          {
               distMin=dista;
               a_index=i;
          }
     }
/*     cout << "(" << lat[0].item(a_index) << ", " << lon[0].item(a_index) << ")" << endl;*/
/*     std::cout << "Centre de gravité : " << bary[0] << "," << bary[1] << "," << bary[2] <<std::endl;*/
// 
//      uint a_index; 
//      distMin=10000.0;
//      for (uint i=0; i<nVert; i++)
//      {
//           dista=(bary - vert[i]).norm();
//           if (dista<distMin)
//           {
//                distMin=dista;
//                a_index=i;
//           }
//      }

     texOut[0].item(a_index)=200;

     std::vector<uint>::iterator listeIndexIt=listeIndex.begin(), listIndexIt2;

     MeshPointDistance dist(surfaceIn);
     std::map<uint, float> mapDist;
//      std::cout << "Computing distances" << std::endl;
     float dAv=0;
     float d;

     for (uint i=0; i<n_points; i++)
          for (uint j=i+1; j<n_points; j++)
          {
/*               cout << i << " - " << j << endl;*/
               d=dist.compute(listeIndex[i], listeIndex[j]);
//           mapDist.insert(std::pair<uint, float>(*listeIndexIt, d));
               dAv+=d;
          }
     
//      for ( listeIndexIt=listeIndex.begin() ; listeIndexIt!=listeIndex.end(); ++listeIndexIt)
//      {
//           cout << (*listeIndexIt) << endl;
//           d=dist.compute((*listeIndexIt), a_index);
//           mapDist.insert(std::pair<uint, float>(*listeIndexIt, d));
//           dAv+=d;
//      }


     float sum=(n_points*(n_points-1))/2.0;
     dAv/=(float) sum;
/*     std::map<uint, float>::iterator dIt=mapDist.begin();*/
//      for ( ; dIt!=mapDist.end(); ++dIt)
//      {
//           std::cout << dIt->first << " : " << dIt->second << std::endl;
//      }
/*     std::cout << "Number of distances : " << sum << std::endl;*/
     std::cout << "Average distance :" << dAv << std::endl;

          
/*     cout << "OK. Writing texture " << endl;*/
     Writer<TimeTexture<short> > texOutW( "texOut.tex" );
     texOutW << texOut ;
/*     std::cout << "Done" << std::endl;*/
  }

  catch( user_interruption & )
    {
    }
  catch( exception & e )
    {
      cerr << e.what() << endl;
    }
  return 1;
}
