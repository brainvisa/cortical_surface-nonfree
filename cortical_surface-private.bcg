

#-----------------------------------------------------------------------------
class CppComponent_cortical_surface( GenericMakerComponent ):
  _name = 'cortical_surface_cpp'

  def __init__( self, opts ):
    options[ 'cortical_surface_cpp' ] = options[ 'cortical_surface-private' ]
    GenericMakerComponent.__init__( self, options[ 'cortical_surface_cpp' ] )

  def dependencies( self ):
    return [ 'aimsalgo(aims)' ]

  def sourceName( self ):
    return 'cortical_surface-private'

  def _libraries( self ):
    return [ 'cortical_surface' ]

  def shareDir( self ):
    return os.path.join( 'share', 'cortical_surface-' + self.version() )

  def docDir( self ):
    return os.path.join( 'share', 'doc', 'cortical_surface-' + self.version() )

  def templateConfigurationFiles( self ):
    return [ os.path.join( self.sourceDir(), i ) for i in
             ( 'config-cpp-command.template', 
               'config-cpp-library.template', 
               'config-cpp-plugin.template' ) ]

  def filesToPack( self ):
    # avoid packaging twice...
    return []

  def packageDocs( self ):
    pass


#-----------------------------------------------------------------------------
class Component_cortical_surface_private( GenericMakerComponent ):
  _name = 'cortical_surface-private'

  def __init__( self, options ):
    GenericMakerComponent.__init__( self, options )

  def dependencies( self ):
    return [ CppComponent_cortical_surface ]


  def templateConfigurationFiles( self ):
    []

  def shareDir( self ):
    return os.path.join( 'share', 'cortical_surface-' + self.version() )

  def docDir( self ):
    return os.path.join( 'share', 'doc', 'cortical_surface-' + self.version() )

  def configureCompilation( self ):
    pass

  def build( self, instances ):
    pass

  def doDoxygen( self ):
    return False
